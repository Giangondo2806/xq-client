/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root'
})
export class UserClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:3333/api";
  }

  get(): Observable<UserVm[]> {
    let url_ = this.baseUrl + "/users";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGet(<any>response_);
        } catch (e) {
          return <Observable<UserVm[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserVm[]>><any>_observableThrow(response_);
    }));
  }

  protected processGet(response: HttpResponseBase): Observable<UserVm[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserVm.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserVm[]>(<any>null);
  }

  me(): Observable<UserInformationVm> {
    let url_ = this.baseUrl + "/users/me";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processMe(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMe(<any>response_);
        } catch (e) {
          return <Observable<UserInformationVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserInformationVm>><any>_observableThrow(response_);
    }));
  }

  protected processMe(response: HttpResponseBase): Observable<UserInformationVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserInformationVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserInformationVm>(<any>null);
  }
}

@Injectable({
  providedIn: 'root'
})
export class SecurityClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:3333/api";
  }

  register(body: RegisterParamsVm): Observable<void> {
    let url_ = this.baseUrl + "/security/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRegister(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRegister(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processRegister(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  login(body: LoginParamsVm): Observable<TokenResultVm> {
    let url_ = this.baseUrl + "/security/login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processLogin(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLogin(<any>response_);
        } catch (e) {
          return <Observable<TokenResultVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<TokenResultVm>><any>_observableThrow(response_);
    }));
  }

  loginSocial(token: string): Observable<TokenResultVm> {
    let url_ = this.baseUrl + "/security/loginSocial";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(token);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processLogin(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLogin(<any>response_);
        } catch (e) {
          return <Observable<TokenResultVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<TokenResultVm>><any>_observableThrow(response_);
    }));
  }

  protected processLogin(response: HttpResponseBase): Observable<TokenResultVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = TokenResultVm.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<TokenResultVm>(<any>null);
  }




  verify(body: VerifyRegistrationParamsVm): Observable<UserVm> {
    let url_ = this.baseUrl + "/security/verify";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processVerify(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processVerify(<any>response_);
        } catch (e) {
          return <Observable<UserVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<UserVm>><any>_observableThrow(response_);
    }));
  }

  protected processVerify(response: HttpResponseBase): Observable<UserVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<UserVm>(<any>null);
  }

  resendVerificationEmail(email: string): Observable<void> {
    let url_ = this.baseUrl + "/security/resend-verification?";
    if (email === undefined || email === null)
      throw new Error("The parameter 'email' must be defined and cannot be null.");
    else
      url_ += "email=" + encodeURIComponent("" + email) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processResendVerificationEmail(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processResendVerificationEmail(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processResendVerificationEmail(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  logout(): Observable<void> {
    let url_ = this.baseUrl + "/security/logout";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processLogout(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLogout(<any>response_);
        } catch (e) {
          return <Observable<void>><any>_observableThrow(e);
        }
      } else
        return <Observable<void>><any>_observableThrow(response_);
    }));
  }

  protected processLogout(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(<any>null);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<void>(<any>null);
  }

  refreshToken(): Observable<TokenResultVm> {

    const headers = new HttpHeaders({
      "Accept": "application/json",
    })

    let url_ = this.baseUrl + "/security/refresh-token";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: headers
    };


    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRefreshToken(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRefreshToken(<any>response_);
        } catch (e) {
          return <Observable<TokenResultVm>><any>_observableThrow(e);
        }
      } else
        return <Observable<TokenResultVm>><any>_observableThrow(response_);
    }));
  }

  protected processRefreshToken(response: HttpResponseBase): Observable<TokenResultVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 201) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result201: any = null;
        let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = TokenResultVm.fromJS(resultData201);
        return _observableOf(result201);
      }));
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ApiException.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
      }));
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ApiException.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
      }));
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ApiException.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ApiException.fromJS(resultData404);
        return throwException("Not found", status, _responseText, _headers, result404);
      }));
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = ApiException.fromJS(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<TokenResultVm>(<any>null);
  }
}

export class ApiException {
  statusCode?: number;
  message?: string;
  status?: string;
  error?: string;
  errors?: any;
  timestamp?: string;
  path?: string;
  stack?: string;

  init(_data?: any) {
    if (_data) {
      this.statusCode = _data["statusCode"] !== undefined ? _data["statusCode"] : <any>null;
      this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
      this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
      this.error = _data["error"] !== undefined ? _data["error"] : <any>null;
      this.errors = _data["errors"] !== undefined ? _data["errors"] : <any>null;
      this.timestamp = _data["timestamp"] !== undefined ? _data["timestamp"] : <any>null;
      this.path = _data["path"] !== undefined ? _data["path"] : <any>null;
      this.stack = _data["stack"] !== undefined ? _data["stack"] : <any>null;
    }
  }

  static fromJS(data: any): ApiException {
    data = typeof data === 'object' ? data : {};
    let result = new ApiException();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["statusCode"] = this.statusCode !== undefined ? this.statusCode : <any>null;
    data["message"] = this.message !== undefined ? this.message : <any>null;
    data["status"] = this.status !== undefined ? this.status : <any>null;
    data["error"] = this.error !== undefined ? this.error : <any>null;
    data["errors"] = this.errors !== undefined ? this.errors : <any>null;
    data["timestamp"] = this.timestamp !== undefined ? this.timestamp : <any>null;
    data["path"] = this.path !== undefined ? this.path : <any>null;
    data["stack"] = this.stack !== undefined ? this.stack : <any>null;
    return data;
  }
}

export class UserVm {
  createdAt?: Date;
  updatedAt?: Date;
  id?: string;
  isActive!: boolean;
  email!: string;
  firstname!: string;
  lastname!: string;
  roleId!: string;
  roleName!: string;

  init(_data?: any) {
    if (_data) {
      this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
      this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>null;
      this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
      this.firstname = _data["firstname"] !== undefined ? _data["firstname"] : <any>null;
      this.lastname = _data["lastname"] !== undefined ? _data["lastname"] : <any>null;
      this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
      this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
    }
  }

  static fromJS(data: any): UserVm {
    data = typeof data === 'object' ? data : {};
    let result = new UserVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
    data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>null;
    data["id"] = this.id !== undefined ? this.id : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["email"] = this.email !== undefined ? this.email : <any>null;
    data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
    data["lastname"] = this.lastname !== undefined ? this.lastname : <any>null;
    data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
    data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
    return data;
  }
}

export class UserInformationVm {
  createdAt?: Date;
  updatedAt?: Date;
  id?: string;
  isActive!: boolean;
  email!: string;
  firstname!: string;
  lastname!: string;
  fullname!: string;
  permissions!: { [key: string]: number; };

  init(_data?: any) {
    if (_data) {
      this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
      this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>null;
      this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
      this.firstname = _data["firstname"] !== undefined ? _data["firstname"] : <any>null;
      this.lastname = _data["lastname"] !== undefined ? _data["lastname"] : <any>null;
      this.fullname = _data["fullname"] !== undefined ? _data["fullname"] : <any>null;
      if (_data["permissions"]) {
        this.permissions = {} as any;
        for (let key in _data["permissions"]) {
          if (_data["permissions"].hasOwnProperty(key))
            this.permissions![key] = _data["permissions"][key];
        }
      }
    }
  }

  static fromJS(data: any): UserInformationVm {
    data = typeof data === 'object' ? data : {};
    let result = new UserInformationVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
    data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>null;
    data["id"] = this.id !== undefined ? this.id : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["email"] = this.email !== undefined ? this.email : <any>null;
    data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
    data["lastname"] = this.lastname !== undefined ? this.lastname : <any>null;
    data["fullname"] = this.fullname !== undefined ? this.fullname : <any>null;
    if (this.permissions) {
      data["permissions"] = {};
      for (let key in this.permissions) {
        if (this.permissions.hasOwnProperty(key))
          data["permissions"][key] = this.permissions[key] !== undefined ? this.permissions[key] : <any>null;
      }
    }
    return data;
  }
}

export class RegisterParamsVm {
  username!: string;
  password!: string;
  firstname!: string;
  lastname!: string;

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.firstname = _data["firstname"] !== undefined ? _data["firstname"] : <any>null;
      this.lastname = _data["lastname"] !== undefined ? _data["lastname"] : <any>null;
    }
  }

  static fromJS(data: any): RegisterParamsVm {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterParamsVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username !== undefined ? this.username : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
    data["lastname"] = this.lastname !== undefined ? this.lastname : <any>null;
    return data;
  }
}

export class LoginParamsVm {
  username!: string;
  password!: string;

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
    }
  }

  static fromJS(data: any): LoginParamsVm {
    data = typeof data === 'object' ? data : {};
    let result = new LoginParamsVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username !== undefined ? this.username : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    return data;
  }
}

export class TokenResultVm {
  token!: string;
  expiry!: Date;

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
      this.expiry = _data["expiry"] ? new Date(_data["expiry"].toString()) : <any>null;
    }
  }

  static fromJS(data: any): TokenResultVm {
    data = typeof data === 'object' ? data : {};
    let result = new TokenResultVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["token"] = this.token !== undefined ? this.token : <any>null;
    data["expiry"] = this.expiry ? this.expiry.toISOString() : <any>null;
    return data;
  }
}

export class VerifyRegistrationParamsVm {
  token!: string;

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
    }
  }

  static fromJS(data: any): VerifyRegistrationParamsVm {
    data = typeof data === 'object' ? data : {};
    let result = new VerifyRegistrationParamsVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["token"] = this.token !== undefined ? this.token : <any>null;
    return data;
  }
}

export class SwaggerException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
